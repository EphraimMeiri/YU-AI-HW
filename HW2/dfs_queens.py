# -*- coding: utf-8 -*-
"""DFS_queens.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1puD0kHn_0jLIZbtEOzNW4Atp2JNHcaYB

This is the notebook version of the code. I will use this to explain the homework.  I used parts of the code from: https://www.sanfoundry.com/python-program-solve-n-queen-problem-without-recursion/

As we did in class, we will represent the board as a one-dimensional array where each position in the arrray is the n'th queen's column value. So if the array is: [1, 3, 0, 2], then the first queen is in position 1 (from 0--3), the second queen is in position 3 (the last column), the third queen is in the first column and the last queen is the in the second position.
"""

columns = [] #columns is the locations for each of the queens
# columns[r] is a number c if a queen is placed at row r and column c.
size = 4
import random #hint -- you will need this for the following code: column=random.randrange(0,size)

"""Let's setup one iteration of the British Museum algorithm-- we'll put down 4 queens randomly."""

def place_n_queens(size):
    columns.clear()
    row = 0
    while row < size:
        column=random.randrange(0,size)
        columns.append(column)
        row+=1

place_n_queens(size)

"""Now, we can print the result with a simple loop:"""

def display():
    for row in range(len(columns)):
        for column in range(size):
            if column == columns[row]:
                print('â™›', end=' ')
            else:
                print(' .', end=' ')
        print()

place_n_queens(size)
display()
print(columns)

"""This of course is not necessary legal, so we'll write a simple DFS search with backtracking:"""

def solve_queen(size):
    columns.clear()
    number_of_moves = 0 #where do I change this so it counts the number of Queen moves?
    number_of_iterations = 0  
    row = 0
    column = 0
    # iterate over rows of board
    while True:
        #place queen in next row
        ''''print(columns)
        print("I have ", row, " number of queens put down")
        display()
        print(number_of_moves)'''
        while column < size:
            number_of_iterations+=1
            if next_row_is_safe(column):
                place_in_next_row(column)
                row += 1
                column = 0
                break
            else:
                column += 1
        # if I could not find an open column or if board is full
        if (column == size or row == size):
            number_of_iterations+=1
            # if board is full, we have a solution
            if row == size:
                print("I did it! Here is my solution")
                display()
                #print(number_of_moves)
                return number_of_iterations, number_of_moves
            # I couldn't find a solution so I now backtrack
            prev_column = remove_in_current_row()
            if (prev_column == -1): #I backtracked past column 1
                print("There are no solutions")
                #print(number_of_moves)
                return number_of_iterations, number_of_moves
            # try previous row again
            row -= 1
            # start checking at column = (1 + value of column in previous row)
            column = 1 + prev_column
"""
    NEW CODE
"""
def empty_board():
    columns.clear()
    print(columns)
    for i in range(0,size):
        columns.append(-1)

def pos_is_safe(row,col):
    myCol=col
    myRow=row
    # Check column
    for row, col in enumerate(columns):
        if col == myCol and row != myRow and col != -1:
            #  print("Col hit (row,col)", row, col)
            return False

    # check diagonal
    for queen_row, queen_column in enumerate(columns):
        if queen_row == myRow:
            continue  # This is just me.
        elif queen_column == -1:
            continue
        elif (queen_column - queen_row) == (myCol - myRow):
            # print("Diagonal hit(row,col)", row, col)
            # print(queen_column,queen_row,myCol,myRow)
            # print((queen_column - queen_row), "==", (myCol-myRow))
            return False

    # check other diagonal
    for queen_row, queen_column in enumerate(columns):
        if queen_row == myRow:
            continue  # This is just me.
        elif queen_column == -1:
            continue
        elif ((size - queen_column) - queen_row
              == (size - myCol) - myRow):
            # print("Other Diagonal hit(row,col)", row, col)
            return False
    return True


def get_conflicts(myRow):
   myCol= columns[myRow]
   conflicts=[]
   if myCol==-1:
       return conflicts
   # Check column
   for row,col in enumerate(columns):
     if col==myCol and row!=myRow and col!=-1:
      #  print("Col hit (row,col)", row, col)
       conflicts.append(row)

   # check diagonal
   for queen_row, queen_column in enumerate(columns):
    if queen_row==myRow:
      continue #This is just me.
    elif queen_column==-1:
        continue
    elif (queen_column - queen_row) == (myCol-myRow):
      # print("Diagonal hit(row,col)", row, col)
      # print(queen_column,queen_row,myCol,myRow)
      # print((queen_column - queen_row), "==", (myCol-myRow))
      conflicts.append(row)

   # check other diagonal
   for queen_row, queen_column in enumerate(columns):
    if queen_row==myRow:
      continue      #This is just me.
    elif queen_column == -1:
      continue
    elif ((size - queen_column) - queen_row
          == (size - myCol) - myRow):
          # print("Other Diagonal hit(row,col)", row, col)
          conflicts.append(row)
   return conflicts

def col_is_valid(myRow):
   myCol= columns[myRow]
   if myCol==-1:
       return True
   # Check column
   for row,col in enumerate(columns):
     if col==myCol and row!=myRow and col!=-1:
      #  print("Col hit (row,col)", row, col)
       return False

   # check diagonal
   for queen_row, queen_column in enumerate(columns):
    if queen_row==myRow:
      continue #This is just me.
    elif queen_column==-1:
        continue
    elif (queen_column - queen_row) == (myCol-myRow):
      # print("Diagonal hit(row,col)", row, col)
      # print(queen_column,queen_row,myCol,myRow)
      # print((queen_column - queen_row), "==", (myCol-myRow))
      return False

   # check other diagonal
   for queen_row, queen_column in enumerate(columns):
    if queen_row==myRow:
      continue      #This is just me.
    elif queen_column == -1:
      continue
    elif ((size - queen_column) - queen_row
          == (size - myCol) - myRow):
          # print("Other Diagonal hit(row,col)", row, col)
          return False
   return True

def board_is_valid():
  # for row,col in enumerate(columns):
  #   print(row,col)
  for i in range(0,size):
    # print()
    # print("I:",i)
    if not col_is_valid(i):
      return False
  return True

def potential_cols(row):
    available_cols=[]
    available=True
    # check column
    for column in range(0,size):
        available=True
        for queen_column in columns:
            if queen_column==-1:
                continue
            elif column == queen_column:
                available= False

        # check diagonal
        for queen_row, queen_column in enumerate(columns):
            if queen_column==-1:
                continue
            elif queen_column - queen_row == column - row:
                available= False

        # check other diagonal
        for queen_row, queen_column in enumerate(columns):
            if queen_column==-1:
                continue
            elif ((size - queen_column) - queen_row == (size - column) - row):
                available= False
        if available:
            available_cols.append(column)
    return available_cols

def place_best(row_choice=-1,avoid=[]):
    if row_choice==-1:
        min_options=size+1
        available= [r for r in range(0,size) if columns[r]==-1]
        for r in available:
            options=potential_cols(r)
            if len(options)<min_options:
                min_options=len(options)
                row_choice=r
    print("Placing row ", row_choice)
    max_options_sum = -1
    col_choice = -1
    available= [r for r in range(0,size) if columns[r]==-1]
    if row_choice in available:
        available.remove(row_choice)

    for col in potential_cols(row_choice):
        columns[row_choice]=col
        if not board_is_valid() or (col in avoid):
            columns[row_choice]=-1
            continue
        else:
            opt_sum=0
            for r in available:
                options= len(potential_cols(r))
                if options!=0:
                    opt_sum+= options
                else: # If any row has no options, this is unacceptable
                    columns[row_choice] = -1
                    opt_sum=-1
            if opt_sum > max_options_sum:
                max_options_sum = opt_sum
                col_choice = col
            columns[row_choice]=-1
    if col_choice==-1: # We're stuck and need to repair/backtrack.
        placed= [r for r in range(0,size) if columns[r]!=-1]
        for row in placed:
            place_best(row,[columns[row]])
    columns[row_choice]=col_choice
    print(columns)
    display()

def solve_forward_checking():
    empty_board()
    number_of_moves = 0  # where do I change this so it counts the number of Queen moves?
    number_of_iterations = 0
    row = 0
    column = 0
    # iterate over rows of board
    while True:
        # place queen in next row
        ''''print(columns)
        print("I have ", row, " number of queens put down")
        display()
        print(number_of_moves)'''
        while column < size:
            number_of_iterations += 1
            if pos_is_safe(row,column):
                columns[row] = column
                if not remaining_rows_possible():
                    columns[row]=-1
                    column+=1
                else:  # We found a good spot for this row, continue to next row.
                    row += 1
                    column = 0
                    break
            else:
                column += 1

        if (column == size or row == size): # If we've iterated to the end of the board.
            if (all_placed_correctly()):
                print("I did it! Here is my solution")
                display()
                # print(number_of_moves)
                return number_of_iterations, number_of_moves
            else:             # I couldn't find a solution so I now backtrack
                number_of_iterations += 1
                prev_column = columns[row-1]
                columns[row-1]=-1
                if (row == 0):  # I backtracked to row 0, and failed.
                    print("There are no solutions")
                    # print(number_of_moves)
                    return number_of_iterations, number_of_moves
                # try previous row again
                row -= 1
                # start checking at column = (1 + value of column in previous row)
                column = 1 + prev_column


# def OLD_solve_forward_checking():
#     empty_board()
#     first_row= random.randrange(0,size)
#     for col in range(0,size):
#         columns[first_row]=col
#         for i in range(1,size):
#             row_choice = -1
#             min_options = size+1  #Equivalent to max_int here
#             available= [r for r in range(0,size) if columns[r]==-1]
#             for r in available:
#                 options=potential_cols(r)
#                 if len(options)<min_options:
#                     min_options=len(options)
#                     row_choice=r
#             max_options_sum = -1
#             col_choice = -1
#             available = [r for r in range(0, size) if columns[r] == -1]
#             if row_choice in available:
#                 available.remove(row_choice)
#
#             for c in potential_cols(row_choice):
#                 columns[row_choice] = c
#                 opt_sum = 0
#                 for r in available:
#                     options = len(potential_cols(r))
#                     if options != 0:
#                         opt_sum += options
#                     else:  # If any row has no options, this is unacceptable
#                         columns[row_choice] = -1
#                         opt_sum = -1
#                 if opt_sum > max_options_sum:
#                     max_options_sum = opt_sum
#                     col_choice = c
#                 columns[row_choice] = -1
#             if col_choice == -1:  # We're stuck and need to repair/backtrack.
#                 placed = [r for r in range(0, size) if columns[r] != -1]
#                 for row in placed:
#                     place_best(row, [columns[row]])
#             columns[row_choice] = col_choice


def solve_repair_very_random():
    empty_board()
    place_n_queens(size)
    display()
    moves= 4
    iterations=0
    while not board_is_valid():
        iterations+=1
        row= random.randrange(0,size)
        # max_conflicts= len(get_conflicts(row))
        # for r in range(0,size):
        #     conflicts =len(get_conflicts(r))
        #     if conflicts>max_conflicts:
        #         row=r
        #         max_conflicts=conflicts
        orig_col= columns[row]
        best_col= orig_col
        min_conflicts=len(get_conflicts(row))
        for c in range(0,size):
            columns[row]= c
            conflicts=len(get_conflicts(row))
            if conflicts<min_conflicts:
                min_conflicts=conflicts
                best_col=c
        if best_col==orig_col:
            print("No change")
        else:
            moves+=1
            columns[row]=best_col
            print(row,": Moved from ",orig_col," to ",best_col)
    print("Did it!")
    display()
    print(columns)
    return iterations,moves


def solve_repair_deadend_random():
    empty_board()
    place_n_queens(size)
    display()
    moves= 4
    iterations=0
    while not board_is_valid():
        iterations+=1
        row= random.randrange(0,size)
        max_conflicts= len(get_conflicts(row))
        for r in range(0,size):
            conflicts =len(get_conflicts(r))
            if conflicts>max_conflicts:
                row=r
                max_conflicts=conflicts
        orig_col= columns[row]
        best_col= orig_col
        min_conflicts=len(get_conflicts(row))
        for c in range(0,size):
            columns[row]= c
            conflicts=len(get_conflicts(row))
            if conflicts<min_conflicts:
                min_conflicts=conflicts
                best_col=c
        if best_col==orig_col:
            print("No change")
            place_n_queens(size)
        else:
            moves+=1
            columns[row]=best_col
            print(row,": Moved from ",orig_col," to ",best_col)
    print("Did it!")
    display()
    print(columns)
    return iterations,moves


"""This code is nice, but it uses three functions:

1. place_in_next_row

2. remove_in_current_row

3. next_row_is_safe

That we now have to define


"""

def place_in_next_row(column):
    columns.append(column)
 
def remove_in_current_row():
    if len(columns) > 0:
        return columns.pop()
    return -1

def next_row_is_safe(column):
    row = len(columns) 
    # check column
    for queen_column in columns:
        if column == queen_column:
            return False
 
    # check diagonal
    for queen_row, queen_column in enumerate(columns):
        if queen_column - queen_row == column - row:
            return False
 
    # check other diagonal
    for queen_row, queen_column in enumerate(columns):
        if ((size - queen_column) - queen_row
            == (size - column) - row):
            return False
    return True



def remaining_rows_possible():
    remaining= [r for r in range(0,size) if columns[r]==-1]
    for r in remaining:
        if len(potential_cols(r))==0:
            return False
    return True

# #size = int(input('Enter n: '))
# num_iterations=0
# number_moves = 0
# #for i in range(0, 100):
# #    columns = [] #columns is the locations for each of the queens
# num_iterations, number_moves=solve_queen(size)
# print(num_iterations)
# print(columns)
size=8
empty_board()
display()

def all_placed_correctly():
    for row in columns:
        if columns[row]==-1:
            return False
    if board_is_valid():
        return True
    else:
        return False

# count=0
# while not all_placed_correctly():
#     count+=1
#     place_best()
# print("count: ",count)

# print(solve_repair_very_random())
# print(solve_queen(size))

# print(solve_repair_deadend_random())

# print(oldDFS_solve_forward_checking())
print(solve_queen(size))
print(columns)